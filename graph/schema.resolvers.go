package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"go_graphql/graph/model"
	"log"
)

// Client is the resolver for the client field.
func (r *queryResolver) Client(ctx context.Context, cpf string) (*model.Client, error) {
	ginContext, err := GinContextFromContext(ctx)
	if err != nil {
		return nil, err
	}
	log.Println("Gin context extracted successfully: ", ginContext)

	client, err := r.ClientDB.GetClient(cpf)
	if err != nil {
		return nil, err
	}
	return &model.Client{
		Cpf:     client.Cpf,
		Nome:    client.Nome,
		Celular: client.Celular,
	}, nil
}

// Dados is the resolver for the dados field.
func (r *queryResolver) Dados(ctx context.Context, nucpf string) (*model.Dados, error) {
	ginContext, err := GinContextFromContext(ctx)
	if err != nil {
		return nil, err
	}
	log.Println("Gin context extracted successfully: ", ginContext)

	dados, err := r.ClientDB.GetDados(nucpf)
	if err != nil {
		return nil, err
	}
	return &model.Dados{
		Nucpf:        dados.NuCpf,
		Nomesegurado: dados.NomeSeg,
		Esp:          dados.Especie,
	}, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
